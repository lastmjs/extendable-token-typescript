type Account = record { AccountIdentifier; Balance; };
type Accounts = vec Account;

type AccountIdentifier = text;

type Balance = nat;

type BalanceRequest = record {
    user: User;
    token: TokenIdentifier;
};

type BalanceResponse = variant {
    ok: Balance;
    err: CommonError;
};

type CommonError = variant {
    InvalidToken: TokenIdentifier;
    Other: text;
};

type Extension = text;
type Extensions = vec Extension;

type FungibleMetadata = record {
    name: text;
    symbol: text;
    decimals: nat8;
    metadata: opt blob;
};

type Memo = blob;

type Metadata = variant {
    fungible: FungibleMetadata;
    nonfungible: NonFungibleMetadata;
};

type MetadataResponse = variant {
    ok: Metadata;
    err: CommonError;
};

type NonFungibleMetadata = record {
    metadata: opt blob;
};

type SupplyResponse = variant {
    ok: Balance;
    err: CommonError;
};

type TokenIdentifier = text;

type TransferRequest = record {
    from: User;
    to: User;
    token: TokenIdentifier;
    amount: Balance;
    memo: Memo;
    notify: bool;
};

type TransferResponse = variant {
    ok: Balance;
    err: TransferResponseError;
};

type TransferResponseError = variant {
    Unauthorized: AccountIdentifier;
    InsufficientBalance: null;
    Rejected: null;
    InvalidToken: TokenIdentifier;
    CannotNotify: AccountIdentifier;
    Other: text;
};

type User = variant {
    address: text;
    "principal": principal;
};

service : {
    "balance": (BalanceRequest) -> (BalanceResponse) query;
    "claim": () -> (bool);
    "extensions": () -> (Extensions) query;
    "metadata": (TokenIdentifier) -> (MetadataResponse) query;
    "registry": () -> (Accounts) query;
    "supply": (TokenIdentifier) -> (SupplyResponse) query;
    "transfer": (TransferRequest) -> (TransferResponse);
}